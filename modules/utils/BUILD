load("//bazel:hephaestus.bzl", "heph_cc_binary", "heph_cc_library", "heph_cc_test")

package(default_visibility = ["//visibility:public"])

INCLUDE_PATHS = [
    "-Ibazel-out/k8-fastbuild/bin/modules/utils/src",
]

filegroup(
    name = "util_srcs",
    srcs = ["src/utils.cpp"],
)

# Generate version_impl.h
genrule(
    name = "version",
    srcs = [":util_srcs"],
    outs = ["src/version_impl.h"],
    cmd = "OUT=$$(pwd)/$@;" +
          "cd $$(dirname $(location :util_srcs));" +
          "VERSION_TAG=$$(git describe --tags --abbrev=0 || echo 'v0.0.0');" +
          "VERSION_MAJOR=$$(echo $$VERSION_TAG | cut -d'.' -f1 | tr -d 'v');" +
          "VERSION_MINOR=$$(echo $$VERSION_TAG | cut -d'.' -f2);" +
          "VERSION_PATCH=$$(echo $$VERSION_TAG | cut -d'.' -f3 | tr -cd '0-9');" +
          """cat <<EOL > version_impl.h
//=================================================================================================
// Copyright (C) 2023-2024 HEPHAESTUS Contributors
// MIT License
//=================================================================================================
#pragma once
#include <cstdint>
#include <string_view>
namespace heph::utils
{
// These are autogenerated by the build system from version.in
static constexpr std::uint8_t VERSION_MAJOR = $$VERSION_MAJOR;
static constexpr std::uint8_t VERSION_MINOR = $$VERSION_MINOR;
static constexpr std::uint16_t VERSION_PATCH = $$VERSION_PATCH;
static constexpr std::string_view REPO_BRANCH = "$$(git rev-parse --abbrev-ref HEAD)";
static constexpr std::string_view BUILD_PROFILE = "RelWithDebInfo";
static constexpr std::string_view REPO_HASH = "$$(git log -1 --format=%h)";
} // namespace heph::utils
EOL
""" + "cp version_impl.h $$OUT",
    local = True,
)

heph_cc_library(
    name = "utils",
    srcs = glob([
        "src/**/*.cpp",
    ]),
    hdrs = glob([
        "include/**/*.h",
    ]) + ["src/version_impl.h"],
    extra_copts = INCLUDE_PATHS,
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = [
        ":version",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/log:log",
        "@abseil-cpp//absl/random:random",
        "@abseil-cpp//absl/time:time",
        "@fmt",
        "@magic_enum",
    ],
)

############
# Binaries #
############

heph_cc_binary(
    name = "example",
    srcs = ["examples/example.cpp"],
)

#########
# Tests #
#########

UTILS_TEST_DEPS = [
    ":utils",
    "@googletest//:gtest",
]

heph_cc_test(
    name = "bit_flag_tests",
    srcs = ["tests/bit_flag_tests.cpp"],
    deps = UTILS_TEST_DEPS,
)
